package simpledb;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import simpledb.Aggregator.Op;

/**
 * A {@code StringAggregator} computes some aggregate value over a set of {@code StringField}s.
 */
public class StringAggregator implements Aggregator {


	protected int gbfield;
	protected Op what;
	protected Type gbfieldtype;
	protected int afield;
	protected int index = 1;
	protected HashMap<Field, Integer> agg;
	protected Field count = null;
	protected Field nogrouping = null;
	protected TupleDesc tdesc;
	protected ArrayList<Field> fieldList = new ArrayList<Field>();
	protected DbIterator queryResult;
	protected ArrayList<Tuple> tupleList = new ArrayList<Tuple>();
	protected Iterable<Tuple> tupleIterator;

	/**
	 * Constructs a {@code StringAggregator}.
	 * 
	 * @param gbfield
	 *            the 0-based index of the group-by field in the tuple, or {@code NO_GROUPING} if there is no grouping
	 * @param gbfieldtype
	 *            the type of the group by field (e.g., {@code Type.INT_TYPE}), or {@code null} if there is no grouping
	 * @param afield
	 *            the 0-based index of the aggregate field in the tuple
	 * @param what
	 *            aggregation operator to use -- only supports {@code COUNT}
	 * @throws IllegalArgumentException
	 *             if {@code what != COUNT}
	 */

	public StringAggregator(int gbfield, Type gbfieldtype, int afield, Op what) {
		// some code goes here
		this.gbfield = gbfield;
		this.gbfieldtype = gbfieldtype;
		this.afield = afield;
		this.what = what;
		assert what == Op.COUNT ;
		agg = new HashMap<Field, Integer>();
		tdesc = createTd();
	}

	protected TupleDesc createTd(){
		String[] name;
		Type[] type;
		if(gbfield == Aggregator.NO_GROUPING){
			name = new String[] {what.name()};
			type = new Type[] {Type.INT_TYPE};
		}else{
			name = new String[] {"groupValue", what.name()};
			type = new Type[] {gbfieldtype, Type.INT_TYPE};
		}
		return new TupleDesc(type,name);
	}
	
	/**
	 * Merges a new tuple into the aggregate, grouping as indicated in the constructor.
	 * 
	 * @param tup
	 *            the Tuple containing an aggregate field and a group-by field
	 */
	public void merge(Tuple tMerge) {
		// some code goes here
		/*
		 * tmerge has either at most 2 fiels
		 * field[0] is the aggregate if there is no grouping field
		 * if there is a grouping field
		 * field[0] is the groupfieldname
		 * field[1] is aggregate fieldname
		 * 
		 */
		int value;
		//Tuple temp;
		if(gbfield == Aggregator.NO_GROUPING)
		{
			/*
			 * if there's no grouping then just a tuple of size one is passed to this method
			 * field[0] contains the aggregate field
			 * 
			 * first checks if the field is in the hashmap
			 * if it is then increment the value at location its located
			 * else add it to the hashmap
			 */
			if(agg.containsKey(nogrouping))
			{
				value = ((Integer)agg.get(nogrouping)).intValue();
				agg.put(nogrouping, new Integer(value + 1));
			}
			else
			{
				fieldList.add(nogrouping);
				agg.put(tMerge.fields[0], new Integer(1));
			}
		}
		else
		{
			/*
			 * theres a grouping field therefore add first part of tuple passed into hashmap
			 * first position of tuple is the gfield
			 * 2nd position of tuple is afield
			 */
			if(agg.containsKey(tMerge.fields[0]))
			{
				value = ((Integer)agg.get(tMerge.fields[0])).intValue();
				agg.put(tMerge.fields[0], new Integer(value +1));
			}
			else
			{
				fieldList.add(tMerge.fields[0]);
				agg.put(tMerge.fields[0], new Integer(1));
			}
		}//end outer else statement
		
		
	}//end method merge

	/**
	 * Creates a {@code DbIterator} over group aggregate results.
	 *
	 * @return a {@code DbIterator} whose tuples are the pair ({@code groupVal}, {@code aggregateVal}) if using group,
	 *         or a single ({@code aggregateVal}) if no grouping. The aggregateVal is determined by the type of
	 *         aggregate specified in the constructor.
	 */
	public DbIterator iterator() {
		//dbiterator = tupleiterator
		int index;
		Tuple temporary;
		Field counter;
		Field field;
		int aggCount; 
		//temp = new Tuple(tdesc);
		//tupleList
		
		for(index = 0; index < fieldList.size(); index++)
		{
			if(gbfield == Aggregator.NO_GROUPING)
			{
				temporary = new Tuple(tdesc);
				aggCount = ((Integer)agg.get(fieldList.get(index)));
				counter = new IntField(aggCount);
				temporary.setField(0, counter);
				tupleList.add(temporary);
				queryResult = new TupleIterator(tdesc, tupleList);
				return queryResult;
			}//end if
			else
			{
				temporary = new Tuple(tdesc);
				aggCount = ((Integer)agg.get(fieldList.get(index)));
				field = fieldList.get(index);
				counter = new IntField(new Integer(aggCount));
				temporary.setField(0, field);
				temporary.setField(1, counter);
				tupleList.add(temporary);
				//queryResult = new TupleIterator(tdesc, tupleList);
			}//end else
		}//end for loop
		queryResult = new TupleIterator(tdesc, tupleList);
		
		return queryResult;
		
		
		
		/*
		ArrayList<Tuple> t1 = new ArrayList<Tuple>();
		TupleDesc aggTupleDesc = createTd();
		Tuple add;
		Field group = (Field) agg.keySet().iterator();
		while(((Iterator<Field>) group).hasNext()){
			int total = agg.get(group);
			add = new Tuple(aggTupleDesc);
			if(gbfield == Aggregator.NO_GROUPING)
				add.setField(0, new IntField(total));
			else{
				add.setField(0, group);
				add.setField(1, new IntField(total));
			}
			t1.add(add);
		}
		return new TupleIterator(aggTupleDesc, t1);*/
	}
}
		
		/*
		 * Iterator<String> it = list.iterator();
while (it.hasNext()) {
  String string=it.next();
  System.out.println(string);
}
		for(int i=0; i<count.keySet().size(); i++){
			int total = count.get(i);
			add = new Tuple(aggTupleDesc);
			if(gbfield == Aggregator.NO_GROUPING)
				add.setField(0, new IntField(total));
			else{
				add.setField(0, count.get(i));
			}
			*/
		//}
		//throw new UnsupportedOperationException("implement me");
	//}


